<?php

namespace app\index\controller;
use think\Controller;
use think\Session;
use think\Config;
use app\api\controller\Api;
use think\Db;
use app\api\controller\WeixinPay;
use app\api\controller\PayService;
use app\api\service\SocketService;

class Index extends controller
{
    private $connect = 'mysql://root:suyongkeji@suyongw.cn:3306/send#utf8';
    private $APPID = 'wx99a8cdf12be465c4';
    private $APPSECRET = 'c300eed90f38fe8b2f6e3fd3c52370bb';
    private $MCH_ID = 1488710252;    //商户号
    private $KEY = '4FDFAA5085309EDF50A52B051B92FAEA'; //支付秘钥
      //登陆
    public function login($code){
       $appid = $this->APPID;
       $appsecret = $this->APPSECRET;
       // $code = $_POST['code'];
       $url="https://api.weixin.qq.com/sns/jscode2session?appid=".$appid."&secret=".$appsecret."&js_code=".$code."&grant_type=authorization_code";
       $arr = $this->curl_get($url);  
       $res = json_decode($arr,true);
       return json_encode($res);
    }

      //curl
    public function curl_get($url){
       $info=curl_init();
       curl_setopt($info,CURLOPT_RETURNTRANSFER,true);
       curl_setopt($info,CURLOPT_HEADER,0);
       curl_setopt($info,CURLOPT_NOBODY,0);
       curl_setopt($info,CURLOPT_SSL_VERIFYPEER, false);
       curl_setopt($info,CURLOPT_SSL_VERIFYHOST, false);
       curl_setopt($info,CURLOPT_URL,$url);
       $output= curl_exec($info);
       curl_close($info);
       return $output;
    }

    public function index(){
      echo "1";
    }
    //手机验证码
    public function send_valiCode($phone)
    {
        $code = rand(10000, 99999);
        $sms_code = json_encode(['code' => $code]);
        $url = 'https://api.mysubmail.com/message/xsend.json';
        $data = "appid=14520&to=" . $phone . "&project=f7Br63&signature=fd766e9534c72a7856ab962bf8fc9059&vars=" . $sms_code;
        $res = $this->_requestPost($url, $data);
        $result = json_decode($res, true);
        if ($result['status'] == 'success') {
            return $code;
        }
        return false;
    }
    public static function _requestPost($url, $data, $ssl = true)
    {
        // curl完成
        $curl = curl_init();

        //设置curl选项
        curl_setopt($curl, CURLOPT_URL, $url);//URL
        $user_agent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36';
        curl_setopt($curl, CURLOPT_USERAGENT, $user_agent);//user_agent，请求代理信息
        curl_setopt($curl, CURLOPT_AUTOREFERER, true);//referer头，请求来源
        //SSL相关
        if ($ssl) {
            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);//禁用后cURL将终止从服务端进行验证
            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);//检查服务器SSL证书中是否存在一个公用名(common name)。
        }
        // 处理post相关选项
        curl_setopt($curl, CURLOPT_POST, true);// 是否为POST请求
        curl_setopt($curl, CURLOPT_POSTFIELDS, $data);// 处理请求数据
        // 处理响应结果 
        curl_setopt($curl, CURLOPT_HEADER, false);//是否处理响应头
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);//curl_exec()是否返回响应结果

        // 发出请求
        $response = curl_exec($curl);
        if (false === $response) {
            return false;
        }
        return $response;
    }
    //注册
    public function register(){
        $data = input('post.');
        $user = Db::connect($this->connect)->table('user')->where('tel',$data['tel'])->find();
        if($user){
          return '2';
        }
        $data['up'] =intval($data['up']);
        $re = Db::connect($this->connect)->table('admin')->where('id',$data['up'])->find();
        if(!$re){
            return '3';
        }
        $res = Db::connect($this->connect)->table('user')->insert($data);
        return $res?'1':'0'; 
    }
    //登录
    public function user_login($tel,$password){
        $user = Db::connect($this->connect)->table('user')->where('tel',$tel)->where('password',$password)->find();
        if($user){
            Db::connect($this->connect)->table('user')->where('openid',$user['openid'])->update(['state'=>1]);
            return '1';
        }else{
            return '0';
        }
    }
    //注销
    public function loginout($openid){
        $re = Db::connect($this->connect)->table('user')->where('openid',$openid)->update(['state'=>0]);
        return $re?'1':'0';
    }
    /*
       * 上传文件
       * @param file  小程序前端请求获取
       */
    public function upload(){
        $api = new Api();
        $file=request()->file('file');
        $data = $api->Upload_Img($file);
        return $data;
    }

    //首页的数据
    public function index_info($openid){
        $re = Db::connect($this->connect)->table('user')->where('openid',$openid)->field('username,head,money,tel,integral')->find();
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }
    //注册骑士
    public function register_knight(){
        $area = explode(',',input('post.area'));
        if($area[0]==$area[1]){
          $area[1]='市辖区';
        }
        $area_str=implode("/",$area);
        $data = [
            'username'=>input('post.username'),
            'tel'=>input('post.tel'),
            'type'=>input('post.type'),
            'area'=>$area_str,
            'id_card_num'=>input('post.id_card_num'),
            'put_id_card'=>input('post.put_id_card'),
            'id_card'=>input('post.id_card'),
            'car'=>input('post.car')
        ];
        $knight = Db::connect($this->connect)->table('knight')->where('tel',$data['tel'])->find();
        if($knight){
          return '2';
        }
        $res = Db::connect($this->connect)->table('knight')->insert($data);
        return $res?'1':'0';
    }
    //发起订单
    public function strat_order(){
        $data = input('post.');
        $data['order_num'] = $this->rand_num();
        $data['start'] = time();
        $data['area'] =  Db::connect($this->connect)->table('user')->where('openid',$data['openid'])->value('area');
        $res = Db::connect($this->connect)->table('order')->insert($data);
        return $res?$data['order_num']:'0';
    }
    //支付订单
    public function pay_order($openid,$order_num){
        $price = Db::connect($this->connect)->table('order')->where('order_num',$order_num)->value('price');
        $body = '支付订单';   //商品描述
        $total_fee = $price*100;  //单位分(整数)
        $wx_pay = new WeixinPay($this->APPID,$openid,$this->MCH_ID,$this->KEY,$order_num,$body,$total_fee);
        return json_encode($wx_pay->pay());
    }
    //订单支付成功
    public function pay_order_success($order_num){
        $res = Db::connect($this->connect)->table('order')->where('order_num',$order_num)->update(['pay'=>1]);
        return $res?'1':'0';
    }
    // 随机订单号
    public function rand_num(){
      $num = mt_rand(1,100);
      $time = time();
      $rand_num = $num.$time;
      return $rand_num;
    }
    //订单管理
    public function order_info($openid,$state='0'){
        if(!$state){
          $map = null;
        }else{
          $map['o.state']=array('eq',$state);
        }
        $re = Db::connect($this->connect) ->table('order')
                                            ->alias('o')
                                            ->join('user u','o.openid = u.openid')
                                            ->field('o.*,u.username,u.head')
                                            ->where('o.openid',$openid)
                                            ->where($map)
                                            ->select();
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }



    //商务合作
    public function consociation(){
        $data = input('post.');
        $res = Db::connect($this->connect)->table('order')->insert($data);
         return $res?'1':'0';
    }
    //评价
    public function comment($order_num,$comment){
        $res = Db::connect($this->connect)->table('order')->where('order_num',$order_num)->update(['comment'=>$comment]);
        return $res?'1':'0';
    }
    //提现
    public function pull_money($openid,$money){
        $balance = Db::connect($this->connect)->table('user')->where('openid',$openid)->value('money');
       if($money>$balance){
            return 2;
       }
       $rand_num = $this->rand_num();
       $re = $this->in_money($openid,$money,$rand_num,2);
       if($re=='1'){
          $n =  $balance-$money;
          $res = Db::connect($this->connect)->table('user')->where('openid',$openid)->update(['money'=>$n]);
          if($res){
            return $this->withdraw($openid,$money,$rand_num);
          }
       }else{
          return 0;
       }
    }
    /*
     * 提现
     */
      public function withdraw($openid,$totalFee,$outTradeNo){
           $payservice =new PayService($this->MCH_ID,$this->APPID,$this->APPSECRET,$this->KEY);
           // $openid = 'o_hZK5F7Dr7LDDSX47AYRxNieRHw';
           // $totalFee =100;
           // $outTradeNo ="354kosdsdadj";
           $re = $payservice->createJsBizPackage($openid,$totalFee,$outTradeNo);
          // if($re == true){
          //     $data=[
          //         're' => '提现成功',
          //         'code' => 1,
          //         'msg' => 'success'
          //     ];
          // }else{
          //     $data=[
          //         're' => '提现失败',
          //         'code' => 0,
          //         'msg' => $re
          //     ];
          // }
          if($re == 'turn'){
            return 'success';
          }else{
            return $re;
          }
      }
    //充值
    public function pay_balance($openid,$money){
        $out_trade_no = $this->rand_num(); //订单号
        $body = '支付订单';   //商品描述
        $re = $this->in_money($openid,$money,$out_trade_no,1);
        if($re=='1'){
            $total_fee = $money*100;  //单位分(整数)
            $wx_pay = new WeixinPay($this->APPID,$openid,$this->MCH_ID,$this->KEY,$out_trade_no,$body,$total_fee);
            return json_encode($wx_pay->pay());
        }else{
            return '0';
        }
    }
    //充值成功
    public function pay_balance_success($openid,$money){
        Db::connect($this->connect)->table('money')->where('openid',$openid)->update(['state'=>1]);
        Db::connect($this->connect)->table('user')->where('openid',$openid)->setInc('money',$money);
        return '1';
    }
    //交易订单
    private function in_money($openid,$money,$order_num,$type){
        $res=Db::connect($this->connect)->table('money')->insert(['openid'=>$openid,'money'=>$money,'time'=>time(),'order_num'=>$order_num,'type'=>$type]);
        return $res?'1':'0';
    }
    //常用区域
    public function often($openid){
        $sql = "SELECT to_address  FROM `order` WHERE openid='$openid' GROUP BY to_address ORDER BY COUNT(*) DESC LIMIT 1";
        $to_address = Db::connect($this->connect)->query($sql);
        $sql = "SELECT from_area  FROM `order` WHERE openid='$openid' GROUP BY from_area ORDER BY COUNT(*) DESC LIMIT 1";
        $from_area = Db::connect($this->connect)->query($sql);
        $re = array_merge($to_address,$from_area);
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }
    // 查询月份
    private function month($time,$k){
        if($time=='1'){//本月
            $start = strtotime(date('Y-m-01'));
            $end = strtotime(date('Y-m-01'))+(60*60*24*24);
            $month[$k] =array('between',[$start,$end]);
        }else if($time=='2'){//上个月
            $start = strtotime(date('Y-m-01'))-(60*60*24*24);
            $end = strtotime(date('Y-m-01'))-1;
            $month[$k] =array('between',[$start,$end]);
        }else{
            $month=null;
        } 
        return $month;
    }
    //提现明细
    public function get_balance($time,$openid){
        $month = $this->month($time,'time');
        $re = Db::connect($this->connect)->table('money')->where('openid',$openid)->where($month)->where('state',1)->field('time,money,type')->select();
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }

    //收益明细
    public function get_income($time,$openid){
         $month = $this->month($time,'start');
         $re = Db::connect($this->connect)->table('order')->where('knight',$openid)->where($month)->where('state',1)->field('over,price')->select();
         foreach($re as $k=>$v){
              $re[$k]['price']=$v['price']*0.75;
         }
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }
    
    //判断用户是否登录
    public function is_login($openid){
        $is_login = Db::connect($this->connect)->table('user')->where('openid',$openid)->where('state',1)->find();
        if($is_login){
            return '1';
        }else{
            return '0';
        }
    }
    
    //定位
    public function address($longitude,$latitude,$openid){
       $key = '35DLaWTFLzP2qZviNwe2lzdG5KGjDSaV';
       $url = "http://api.map.baidu.com/geocoder/v2/?ak=$key&location=$latitude,$longitude&output=json";
       $res = $this->curl_get($url);
       $result = json_decode($res, true);
       //dump($result);die;
       $arr=[];
       $arr['province'] = $result['result']['addressComponent']['province'];
       $arr['city']= $result['result']['addressComponent']['city'];
       $arr['district'] = $result['result']['addressComponent']['district'];
       if($arr['province']==$arr['city']){
            $arr['city']='市辖区';
       }
       $area=$this->get_area($arr);
       $area_jing=$result['result']['formatted_address'];
       $re = Db::connect($this->connect)->table('user')->where('openid',$openid)->update(['area'=>$area,'area_jing'=>$area_jing]);
       return $re?'1':'0';
    }
    public function get_area($arr){
        $arr=array_filter($arr);
        $str=implode('/',$arr);
        return $str;
    }
    //定位结束
  
    //检查年费支付
    public function check_pay($openid,$order_num){
        $year = Db::connect($this->connect)->table('user')->where('openid',$openid)->value('year');
        if(!$year){
            return '0';//未支付
        }
        //检查年费过期
        if($year<time()){
            return '2';//过期
        }else{
            $this->send_userk($openid,$order_num);
        }
    }
       /*
     * 支付年费
     */
    public function year_pay(){
        $openid = input('openid');
        $out_trade_no = $this->rand_num(); //订单号
        $body = '支付订单';   //商品描述
        $total_fee = 3980;//文章价格
        $total_fee = $total_fee*100;  //单位分(整数)
        $wx_pay = new WeixinPay($this->APPID,$openid,$this->MCH_ID,$this->KEY,$out_trade_no,$body,$total_fee);
        return json_encode($wx_pay->pay());
    }
    /*
      *支付年费成功
      */
    public function pay_year_success($openid){
        $time=time()+(60*60*24*365);
        $res = Db::connect($this->connect)->table('user')->where('openid',$openid)->update(['year'=>$time]);
        if($res){
          return $this->commission($openid,3980);
        }
    }

    //年费返回佣金
    public function commission($openid,$money){
          $id=Db::connect($this->connect)->table('user')->where('openid',$openid)->value('up');
          Db::connect($this->connect)->table('admin')->where('id',$id)->setInc('money',$money*0.4);
          $upid = Db::connect($this->connect)->table('admin')->where('id',$id)->value('up');
          if($upid!=1){
            Db::connect($this->connect)->table('admin')->where('id',$id)->setInc('money',$money*0.2);
          }
          return '1';
    }

    function get_between($input, $start, $end) { $substr = substr($input, strlen($start)+strpos($input, $start),(strlen($input) - strpos($input, $end))*(-1)); return $substr; }

    
    /**
     * @param string $address 地址
     * @param string $city  城市名
     * @return array
     */
    function getLatLng($address)
    {
        $city = $this->get_between($address,'省','市').'市';
        $result = array();
        $ak = '35DLaWTFLzP2qZviNwe2lzdG5KGjDSaV';//您的百度地图ak，可以去百度开发者中心去免费申请
        $url ="http://api.map.baidu.com/geocoder/v2/?callback=renderOption&output=json&address=".$address."&city=".$city."&ak=".$ak;
        $data = file_get_contents($url);
        $data = str_replace('renderOption&&renderOption(', '', $data);
        $data = str_replace(')', '', $data);
        $data = json_decode($data,true);
        if (!empty($data) && $data['status'] == 0) {
          $result['lat'] = $data['result']['location']['lat'];
          $result['lng'] = $data['result']['location']['lng'];
          return $result;//返回经纬度结果
        }else{
          return null;
        }
    }
    function rad($d)
    {
        return $d * 3.1415926535898 / 180.0;
    }
 
    /**
     * @param $lat1 纬度 如：22.628547
     * @param $lng1 经度 如：114.036845
     * @param $lat2 纬度 如：22.628567
     * @param $lng2 经度 如：114.046055
     * @return float
     */
    public function GetDistance($lat1, $lng1, $lat2, $lng2)
    {
        $EARTH_RADIUS = 6378.137;
        $radLat1 = $this->rad($lat1);
        $radLat2 = $this->rad($lat2);
        $a = $radLat1 - $radLat2;
        $b = $this->rad($lng1) - $this->rad($lng2);
        $s = 2 * asin(sqrt(pow(sin($a/2),2) +
            cos($radLat1)*cos($radLat2)*pow(sin($b/2),2)));
        $s = $s *$EARTH_RADIUS;
        $s = round($s * 10000) / 10000;
        return round($s, 2); ;
    }
        
    
    public function get_price($openid,$area,$to_address){
        // $area='广东省广州市花都区龙珠路1-30';
        // $to_address='广东省广州市海珠区阅江西路222号';
        $order_area = Db::connect($this->connect)->table('user')->where('openid',$openid)->value('area');
        $data = Db::connect($this->connect)->table('how_much_km')->where('area','like','%'.$order_area.'%')->find();
        //dump($data);die;
        $result1= $this->getLatLng($area);
        $lat1 = $result1['lat'];
        $lng1 = $result1['lng'];
        $result2= $this->getLatLng($to_address);
        $lat2 = $result2['lat'];
        $lng2 = $result2['lng'];
        $km= $this->GetDistance($lat1, $lng1, $lat2, $lng2);
        $re = array();
        $re['km'] = $km;
        if($km>$data['over_km']){
            $km = floor($km-$data['over_km']);
            $re['price'] = $km*$data['how_much_km']+$data['strat'];
        }else{
            $re['price']=$data['strat'];
        } 
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }

    //邀请骑士
    public function pull_knight($openid,$code){
        $code =intval($code);
        $re = Db::connect($this->connect)->table('u_and_k')->insert(['user'=>$openid,'knight'=>$code]);
        return $re?'1':'0';
    }
    //我的骑士
    public function my_knight($openid){
        $re = Db::connect($this->connect) ->table('u_and_k')
                                            ->alias('t1')
                                            ->join('knight t2','t1.knight=t2.id')
                                            ->field('t2.username,t2.tel,t2.status')
                                            ->where('t1.user',$openid)
                                            ->select();
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }
    //---------------------------------------骑士端---------------------------------------------------
    // 财务中心
    public function finance($id){
        //本月
        $start = strtotime(date('Y-m-01'));
        $end = strtotime(date('Y-m-01'))+(60*60*24*24);
        $month['start'] =array('between',[$start,$end]);

        $re['m_income'] = Db::connect($this->connect)->table('order')->where('knight',$id)->where($month)->sum('price')*0.75;
        $re['m_num'] = Db::connect($this->connect)->table('order')->where('knight',$id)->where($month)->count();
        $re['d_income'] = Db::connect($this->connect)->table('order')->where('knight',$id)->whereTime('start', 'today')->sum('price')*0.75;
        $re['d_price'] = Db::connect($this->connect)->table('order')->where('knight',$id)->whereTime('start', 'today')->sum('price');
        $re['avg'] = Db::connect($this->connect)->table('order')->where('knight',$id)->avg('price');

        $is_exist = Db::connect($this->connect)->table('finance')->where('k_id',$id)->find();
        if($is_exist){
          $res = Db::connect($this->connect)->table('finance')->where('k_id',$id)->update($re);
        }else{
          $re['k_id'] = $id;
          $re['time'] = time();
          $res = Db::connect($this->connect)->table('finance')->insert($re);
        }
        return $res?'1':'0';
    }
    //提现界面
    public function pull_ui($id){
        $re['money'] = Db::connect($this->connect)->table('knight')->where('id',$id)->value('money');
        $re['pulled'] = Db::connect($this->connect)->table('money')->where('openid',$id)->sum('money');
        $re['pull'] = Db::connect($this->connect)->table('order')->where('knight',$id)->where('state',4)->where('start','elt',time()-(60*60*24*30))->sum('price');
        $re['pull'] = $re['pull']-$re['pulled'] ;
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }
    //骑士提现
    public function k_pull_money($id,$money){
        $balance = Db::connect($this->connect)->table('knight')->where('id',$id)->value('money');
       if($money>$balance){
            return 2;
       }
       $rand_num = $this->rand_num();
       $re = $this->in_money($id,$money,$rand_num,2);
       if($re=='1'){
          $n =  $balance-$money;
          $res = Db::connect($this->connect)->table('knight')->where('id',$id)->update(['money'=>$n]);
          if($res){
              return $this->withdraw($id,$money,$rand_num);
          }
       }else{
          return 0;
       }
    }
    //订单完成返回佣金
    public function order_commission($openid,$order_num){
        $knight = Db::connect($this->connect)->table('order')->where('order_num',$order_num)->value('knight');
        $money = Db::connect($this->connect)->table('order')->where('order_num',$order_num)->value('price');
        $id=Db::connect($this->connect)->table('user')->where('openid',$openid)->value('up');
        $upid = Db::connect($this->connect)->table('admin')->where('id',$id)->value('up');

        Db::connect($this->connect)->table('knight')->where('id',$knight)->setInc('money',$money*0.75);
        Db::connect($this->connect)->table('admin')->where('id',$id)->setInc('money',$money*0.06);
        if($upid!=1){
          Db::connect($this->connect)->table('admin')->where('id',$id)->setInc('money',$money*0.04);
        }
        return '1';
    }
    /*
    *余额支付
    *@param  $openid
    *@param  $order_num  订单号
     */
    public function balance_pay($openid,$order_num){
        $price = Db::connect($this->connect)->table('order')->where('order_num',$order_num)->value('price');
        $balance = Db::connect($this->connect)->table('user')->where('openid',$openid)->value('money');
        if($price>$balance){
          return '2';
        }
        $res = Db::connect($this->connect)->table('user')->where('openid',$openid)->update(['money'=>$balance-$price]);
        if($res){
          $re = Db::connect($this->connect)->table('order')->where('order_num',$order_num)->update(['pay'=>1]);
          if($re){
            return '1';
          }else{
            return '0';
          }
        }else{
          return '0';
        }
    }
    //骑士派送
    public function knight_order($order_num){
        $re = Db::connect($this->connect)->table('order')->where('order_num',$order_num)->find();
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }
    //骑士的订单
    public function my_order($order_num){
        $re = Db::connect($this->connect) ->table('order')
                                          ->alias('t1')
                                          ->join('user t2','t1.openid=t2.openid')
                                          ->field('t1.*,t2.username,t2.head')
                                          ->where('t1.order_num',$order_num)
                                          ->find();
        return json_encode($re,JSON_UNESCAPED_UNICODE);
    }
    //发送socket给店家骑士
     public function send_userk($openid,$order_num){
          $client_id=Db::connect($this->connect)->table('knight')
                                                ->alias('t1')
                                                ->join('u_and_k t2','t1.id=t2.knight')
                                                ->field('t1.socket_id')
                                                ->where('t1.status',0)
                                                ->where('socket_id','neq',null)
                                                ->where('state',1)
                                                ->find();
                                                dump($client_id);die;
          //发送给骑士的订单信息
          $arr = $this->my_order($order_num);                                    
          $obj =new SocketService();
          return $obj->sendMessage($client_id,$arr);
     }
}
